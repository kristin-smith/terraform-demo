terraform demo:

Step 1, download zip file (need to already have an AWS account and credentials to read/modify the following - may be a consideration)
Step 2, create s3 bucket for backend
Step 3, terraform init and go look at bucket to see the statefile
Step 4, review terraform project in its existing state with two modules
Step 5, run a terraform plan and apply to bring up the resources
	terraform state list
		module.messaging-application.aws_cloudwatch_event_rule.morning_reminder
		module.messaging-application.aws_cloudwatch_event_target.morning_reminder_lambda
		module.messaging-application.aws_iam_role.iam_for_lambda
		module.messaging-application.aws_lambda_function.morning_reminder_lambda
		module.web-application.aws_default_vpc.default
		module.web-application.aws_instance.web-application
		module.web-application.aws_key_pair.demo-key
		module.web-application.aws_security_group.web-application-http

step 6, go over potential split
	create new project (will hold only the web-application resources)
	remove messaging-application module from main.tf in each and then delete the messaging-application directory
	Update backend stanza in terraform.tf with web-application s3 key
	terraform init (use the option to start with existing state)
	terraform plan | grep destroyed
	  # module.messaging-application.aws_cloudwatch_event_rule.morning_reminder will be destroyed
	  # module.messaging-application.aws_cloudwatch_event_target.morning_reminder_lambdawill be destroyed
	  # module.messaging-application.aws_iam_role.iam_for_lambda will be destroyed
	  # module.messaging-application.aws_lambda_function.morning_reminder_lambda will be destroyed

	old project:
	Update backend stanza in terraform.tf with messaging-application s3 key
	remove web-application module from main.tf in each and then delete the web-application directory
	terraform init (use the option to start with existing state)
	terraform plan | grep destroyed
	  # module.web-application.aws_default_vpc.default will be destroyed
	  # module.web-application.aws_instance.web-application will be destroyed
	  # module.web-application.aws_key_pair.demo-key will be destroyed
	  # module.web-application.aws_security_group.web-application-http will be destroyed



Step 7, unify them again (if your refector involves combining two repos)
	Copy web-application directory back into terraform-demo
	Add web-application back to module list
	terraform init
	terraform plan | grep created
		- these resources that are listed actually already exist in AWS)
		- we could reimport them manually but that's impractical at scale
	cd terraform-web-application-demo prroject
	terraform state pull (pulls down state from s3 to your local machine)
	copy module.web-application resources block and add new unified S3 key
	Update backend stanza in terraform.tf with new unified S3 key
	terraform init
	terraform plan - should all be back in order